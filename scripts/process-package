#!/bin/sh

set -e

suite=unstable # FIXME
root=$(pwd)
data_root=$(pwd)/data
log_root=$(pwd)/data/log
status_root=$(pwd)/data/status
date=$(date --rfc-3339=date)

global_tmp_dir=$(mktemp -d)
cleanup() {
  if [ -d "$global_tmp_dir" ]; then
    rm -rf "$global_tmp_dir"
  fi
  find "$data_root" -empty -delete
}
trap cleanup INT TERM EXIT

process_all_packages() {
  # get list of package with DEP-8 tests
  packages=$(./scripts/list-dep8-packages)
  for pkg in $packages; do
    process_package "$pkg"
  done
}

process_package() {
  pkg="$1"
  pkg_dir=$(echo "$pkg" | sed -e 's/\(\(lib\)\?.\).*/\1\/&/')

  # setup tmp dir
  tmp_dir="$global_tmp_dir/$pkg"
  mkdir "$tmp_dir"

  # setup log
  log_dir="${log_root}/${pkg_dir}"
  mkdir -p "$log_dir"
  log_file="$log_dir/${date}.log"

  # setup status "DB"
  status_dir="${status_root}/${pkg_dir}"
  mkdir -p "$status_dir"

  if [ -t 1 ]; then
    echo "$pkg"
  fi

  if ! already_processed; then
    do_process_package "$pkg" > "$log_file" 2>&1
  fi
}

already_processed() {
  [ -f "$status_dir/${date}.json" ]
}

do_process_package() {
  pkg="$1"
  if needs_processing $pkg; then
    banner "Started: $(date -R)"

    start_time=$(date +%s)
    status=fail
    if ./scripts/test-package $pkg; then
      status=pass
    fi
    finish_time=$(date +%s)
    duration=$(($finish_time - $start_time))

    record_status "$pkg" $status "$duration" "Tests ${status}ed"

    banner "Finished: $(date -R)"
  fi
}

needs_processing() {
  whitelist="${root}/.whitelist"
  if [ -f "${whitelist}" ]; then
    if ! grep -q "^$1\$" "${whitelist}"; then
      return 1
    fi
  fi

  check_dependencies "$pkg" > "$tmp_dir/dependencies.txt"
  if [ -f "$status_dir/dependencies.txt" ]; then
    if diff -u --label last-run/dependencies.txt "$status_dir/dependencies.txt" --label current-run/dependencies.txt "$tmp_dir/dependencies.txt" > "$tmp_dir/dependencies.diff"; then
      # no changes in dependencies = no need to run tests
      return 1
    else
      banner "Change in dependency chain for $pkg since last test run"
      cat "$tmp_dir/dependencies.diff"

      cp "$tmp_dir/dependencies.txt" "${status_dir}/dependencies.txt"
      banner "Full dependency chain for $pkg at the moment"
      cat "$status_dir/dependencies.txt"

      return 0
    fi
  else
    banner "First test run for $pkg"

    cp "$tmp_dir/dependencies.txt" "${status_dir}/dependencies.txt"
    banner "Full dependency chain for $pkg at the moment"
    cat "$status_dir/dependencies.txt"

    return 0
  fi
}

check_dependencies() {
  pkg="$1"
  binaries=$(list_binaries "$pkg")
  {
    if ! schroot -c "$suite" -u root -- apt-get install --quiet --assume-yes --simulate $binaries 2>&1; then
      for binary in $binaries; do
        schroot -c "$suite" -u root -- apt-get -q -y --simulate  install $binary 2>&1
      done
    fi
  } | \
    awk '{ if ($1 == "Inst") { sub("^.", "", $3); print($2, $3) } }' | \
    sort | uniq
}

list_binaries() {
  pkg="$1"
  grep_packages -n -s Package -F Source,Package -X "$pkg"
}

grep_packages() {
  grep-dctrl "$@" /var/lib/apt/lists/*_debian_dists_${suite}_main_binary-`dpkg-architecture -qDEB_HOST_ARCH`_Packages
}

grep_sources() {
  grep-dctrl "$@" /var/lib/apt/lists/*_debian_dists_${suite}_main_source_Sources
}

first_banner=
banner() {
  if [ "$first_banner" = "$pkg" ]; then
    echo
  fi
  first_banner="$pkg"
  echo "$@" | sed -e 's/./=/g'
  echo "$@"
  echo "$@" | sed -e 's/./=/g'
  echo
}

record_status() {
  pkg="$1"
  status="$2"
  duration="$3"
  message="$4"
  version=$(grep_sources -n -s Version -F Package -X "$pkg")

  hours=$(( $duration / 3600 ))
  minutes=$(( ($duration % 3600) / 60 ))
  seconds=$(( $duration - ($hours * 3600) - ($minutes * 60) ))
  duration_human="${hours}h ${minutes}m ${seconds}s"
  banner "Status: $status ($message); duration: ${duration_human}"

  # latest entry
  cat > "$status_dir/${date}.json" <<EOF
{
  "package": "${pkg}",
  "version": "${version}",
  "date": "${date}",
  "status": "${status}",
  "duration_seconds": "${duration}",
  "duration_human": "${duration_human}",
  "message": "${message}"
}
EOF
  ln -sf "${date}.json" "$status_dir/latest.json"

  # TODO cleanup old entries (?)

  # history
  history_file="$tmp_dir/history.json"
  echo '[' > "$history_file"
  sep=''
  for entry in $(find "$status_dir" -name '*.json' -and -not -name latest.json -and -not -name history.json | sort); do
    echo "$sep" >> "$history_file"
    sep=,
    cat $entry >> "$history_file"
  done
  echo ']' >> "$history_file"
  cp "$history_file" "$status_dir/history.json"
}


if [ $# -eq 1 ]; then
  process_package "$1"
else
  echo "usage: $0 PACKAGE"
  exit 1
fi

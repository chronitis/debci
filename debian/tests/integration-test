#!/bin/sh

set -ex

#######################################################################

p='r'
pkg=ruby-defaults
native_arch=$(dpkg --print-architecture)
max_wait=30

#######################################################################

export DEBIAN_FRONTEND=noninteractive

echo 'debci_backend=fake' > /etc/debci/conf.d/backend.conf

if [ -n "$other_arch" ]; then
  echo "debci_arch_list='$native_arch $other_arch'" > /etc/debci/conf.d/arch_list.conf
  test_arch="$other_arch"
else
  test_arch="$native_arch"
fi

apt-get install -qy --no-install-recommends \
  debci-collector debci-worker

if [ -n "$other_arch" ]; then
  # start worker for other architecture. This is safe because we are using the
  # "fake" backend, which does not _really_ run code; but we are testing that all
  # other components work OK in a multi-architecture setup.
  other_worker=/etc/systemd/system/debci-worker@2.service
  ln -s /lib/systemd/system/debci-worker@.service $other_worker
  mkdir ${other_worker}.d
  cat > ${other_worker}.d/arch.conf <<EOF
[Service]
ExecStart=
ExecStart=/usr/bin/debci worker --arch $other_arch
EOF
  systemctl daemon-reload
  systemctl start debci-worker@2.service

  # submit job for other architecture
  debci enqueue --arch $other_arch  $pkg
fi

debci enqueue $pkg
sleep 5s

# wait until all queues are empty
pending_jobs() {
  rabbitmqctl list_queues | awk '{ if ($1 ~ /debci/) { print($2) } }' | sort -n -u
}
waited=0
while [ "$(pending_jobs)" -ne 0 ] && [ $waited -lt $max_wait ]; do
  sleep 1s
  waited=$(($waited + 1))
done

sudo systemctl start debci-update.service
sleep 5s
# wait until autopkgtest-incoming is empty
pending_test_results() {
  find /var/lib/debci/data/autopkgtest-incoming -name exitcode | wc -l
}
waited=0
while [ "$(pending_test_results)" -ne 0 ] && [ $waited -le $max_wait ]; do
  sleep 1s
  waited=$(($waited + 1))
done


set +ex

#######################################################################

data=/var/lib/debci/data
html=$data/.html

assertFileExists() {
  local file_description="$1"
  local filename="$2"
  local waited=0
  while [ ! -f "$filename" ] && [ "$waited" -lt "$max_wait" ]; do
    sleep 1s
    waited=$(($waited + 1))
  done
  assertTrue "missing $file_description ($filename); waited $max_wait seconds" \
    "[ -f $filename ]"
}

test_has_global_status_file() {
  assertFileExists 'global status file' \
    "${data}/status/unstable/$test_arch/status.json"
}

test_has_global_package_status_file() {
  assertFileExists 'global package status file' \
    "${data}/status/unstable/$test_arch/packages.json"
}

test_has_package_data_file() {
  assertFileExists 'package status file' \
    "${data}/packages/unstable/$test_arch/$p/$pkg/latest.json"
}

test_has_package_history_file() {
  assertFileExists 'package history file' \
    "${data}/packages/unstable/$test_arch/$p/$pkg/history.json"
}

test_has_package_page() {
  assertFileExists 'package page' \
    "${html}/packages/$p/$pkg/index.html"
  assertTrue "grep $test_arch ${html}/packages/$p/$pkg/index.html"
  if [ -n $other_arch ]; then
    assertTrue "grep $native_arch ${html}/packages/$p/$pkg/index.html"
  fi
}

test_has_package_arch_page() {
  assertFileExists 'architecture-specific package page' \
    "${html}/packages/$p/$pkg/unstable/$test_arch/index.html"
}

. shunit2


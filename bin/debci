#!/bin/sh

set -e

if [ -r /etc/default/debci ]; then
  . /etc/default/debci
fi

usage() {
  cat <<EOF
usage: debci [OPTIONS]

Options:

  -f, --force               Force test run on packages, even if no package in
                            its dependency chain changed. A package will still
                            not be tested if it was already tested today.
  -c N, --concurrency N     Test N packages in parallel
                            (default: 1)
  -d, --debug               Turn debug mode on.

$@
EOF
}

short_options='c:df'
long_options='concurrency:,force,debug'

base=$(readlink -f $(dirname $(readlink -f $0))/..)
cd $base
. lib/environment.sh

log() {
  if [ $debug ]; then
    echo 'debug:' "$@"
  fi
  logger -t debci -i "$@"
}

run() {
  if [ ! $debug ] && which update-testbed >/dev/null 2>/dev/null; then
    log "Updating backend testbed"
    update-testbed
  else
    log "Backend $debci_backend does not provide a way to update testbed!"
  fi
  log "Finished update of backend testbed"

  log "start processing of all packages"

  process_all_packages

  log "finished processing of all packages"
}

process_all_packages() {
  local packages="$(./scripts/list-dep8-packages)"

  local start=$(date +%s)

  if [ "$concurrency" -eq 1 ]; then
    for pkg in $packages; do
      ./scripts/process-package $force "$pkg"
    done
  else
    parallel -j "$concurrency" ./scripts/process-package -- $packages
  fi

  local finish=$(date +%s)

  ./scripts/cleanup

  ./scripts/generate-index $(($finish - $start))
}

# default configuration
concurrency=1
debug=''
force=''

while true; do
  arg="$1"
  shift
  case "$arg" in
    -c|--concurrency)
      concurrency="$1"
      shift
      ;;
    -d|--debug)
      debug=true
      export debci_debug=true
      ;;
    -f|--force)
      force="$arg"
      ;;
    --)
      break
      ;;
  esac
done

(
  flock -n 9 || exit 0
  run "$@"
) 9>/var/lock/debci.lock


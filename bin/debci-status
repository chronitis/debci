#!/bin/sh

set -e

base=$(readlink -f $(dirname $(readlink -f $0))/..)
cd $base
. $base/lib/environment.sh
. $base/lib/functions.sh

usage() {
  cat <<EOF
usage: debci-status [OPTIONS] [PACKAGE] [PACKAGE ...]

When not using -a/--all, one or more PACKAGEs have to be specified.

Options:

  -a, -all                  show status for all packages
  -j, --json                show the full JSON status file
  -f FIELD, --field FIELD   display FIELD from the status file (default: status)
  --help                    show this usage message

EOF
  exit "$1"
}

get_status_file() {
  local pkg="$1"
  local status_dir=$(status_dir_for_package "$1")
  echo "${status_dir}/latest.json"
}

get_json() {
  local status_file=$(get_status_file "$1")
  if [ -f "$status_file" ]; then
    cat "$status_file"
  fi
}

get_status() {
  local pkg="$1"
  local length="${2:-0}"

  local status_file=$(get_status_file "$pkg")

  if [ -f "$status_file" ]; then
    perl -e "\$field = \"$field\"; \$length = $length; "'use Data::Dumper; use JSON; @input = <>; $data = decode_json(join("", @input)); if ($length) { printf("%-${length}s %s\n", $data->{package}, $data->{$field}) } else { printf("%s\n", $data->{$field}) };' "$status_file"
  else
    if [ "$length" -eq 0 ]; then
      echo "unknown"
    else
      printf "%-${length}s unknown\n" "$pkg"
    fi
  fi
}

# defaults
all=''
json=''
field='status'

while true; do
  case "$1" in
    --json|-j)
      json=true
      shift
      ;;
    --all|-a)
      all=true
      shift
      ;;
    --field|-f)
      field="$2"
      if [ ! $field ]; then
        echo "Option -f/--field requires an argument!"
        exit 1
      fi
      shift 2
      ;;
    --help)
      usage 0
      ;;
    -*)
      echo "Invalid option: $1"
      exit 1
      ;;
    *)
      break
      ;;
  esac
done

if [ $all ]; then
  pkgs=$(find "$debci_packages_dir" -mindepth 2 -maxdepth 2 | xargs -n 1 basename)
  eval set -- $pkgs
fi

if [ $# -lt 1 ]; then
  usage 1
fi

# JSON data
if [ $json ]; then
  [ $# -gt 1 ] && echo "["
  prefix=''
  for pkg in $@; do
    if [ $prefix ]; then
      echo "$prefix" | indent
    fi
    get_json "$pkg" | indent
    prefix=','
  done
  [ $# -gt 1 ] && echo "]"
  exit
fi

# single package
if [ $# -eq 1 ]; then
  get_status "$1"
  exit
fi

# multiple packages
max_length=$(for pkg in $@; do echo "$pkg"; done | wc -L)
for pkg in $@; do
  get_status "$pkg" "$max_length"
done

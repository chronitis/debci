#!/bin/sh

set -e

short_options='jlf:'
long_options='json,all,field:'

usage() {
  cat <<EOF
usage: debci-status [OPTIONS] [PACKAGE] [PACKAGE ...]

When not using -l/--all, one or more PACKAGEs have to be specified.

Options:

  -l, -all                  show status for all packages
  -j, --json                show the full JSON status file
  -f FIELD, --field FIELD   display FIELD from the status file (default: status)

$@
EOF
}

base=$(readlink -f $(dirname $(readlink -f $0))/..)
cd $base
. $base/lib/environment.sh
. $base/lib/functions.sh


get_status_file() {
  local pkg="$1"
  local status_dir=$(status_dir_for_package "$1")
  echo "${status_dir}/latest.json"
}

get_json() {
  local status_file=$(get_status_file "$1")
  if [ -f "$status_file" ]; then
    cat "$status_file"
  fi
}

get_status() {
  local pkg="$1"
  local length="${2:-0}"

  local status_file=$(get_status_file "$pkg")

  if [ -f "$status_file" ]; then
    ruby -e "
      field = \"$field\";
      length = $length;"'
      require "json"
      data = JSON.parse(ARGF.read)
      if length > 0
        printf("%-#{length}s", data["package"])
        puts(data[field] || "unknown")
      else
        puts(data[field] || "unknown")
      end
      ' "$status_file"
  else
    if [ "$length" -eq 0 ]; then
      echo "unknown"
    else
      printf "%-${length}s unknown\n" "$pkg"
    fi
  fi
}

# defaults
all=''
json=''
field='status'

while true; do
  case "$1" in
    --json|-j)
      json=true
      shift
      ;;
    --all|-l)
      all=true
      shift
      ;;
    --field|-f)
      field="$2"
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      shift
      ;;
  esac
done

if [ $all ]; then
  if [ -d "$debci_packages_dir" ]; then
    pkgs=$(find "$debci_packages_dir" -mindepth 2 -maxdepth 2 | xargs -n 1 basename)
    eval set -- $pkgs
  else
    exit 0
  fi
fi

if [ $# -lt 1 ]; then
  usage
  exit 1
fi

# JSON data
indent='cat'
if [ $json ]; then
  if [ $# -gt 1 ]; then
    echo "["
    indent=indent
  fi
  prefix=''
  for pkg in $@; do
    if [ $prefix ]; then
      echo "$prefix" | $indent
    fi
    get_json "$pkg" | $indent
    prefix=','
  done
  [ $# -gt 1 ] && echo "]"
  exit
fi

# single package
if [ $# -eq 1 ]; then
  get_status "$1"
  exit
fi

# multiple packages
max_length=$(for pkg in $@; do echo "$pkg"; done | wc -L)
for pkg in $@; do
  get_status "$pkg" "$max_length"
done
